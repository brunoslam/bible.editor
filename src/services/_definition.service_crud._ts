import { InferType, object, string } from 'yup';
import { NodeRepository } from '../repositories/node/node.repository';
import { baseSchema, BaseType, CRUDService } from './crud-service';
import { NodeService } from './node.service';

export enum DefinitionNodeType {
  Definition = 'definition',
}

const definitionSchema = baseSchema.concat(
  object({
    text: string().min(1).required(),
  }),
);
export type Definition = InferType<typeof definitionSchema>;

export class DefinitionService {
  private readonly definition: CRUDService<Definition>;
  constructor(
    private readonly nodeService: NodeService,
    private readonly nodeRepo: NodeRepository,
  ) {
    const service = <T extends BaseType>(
      model: DefinitionNodeType,
      schema: Schema<T>,
    ) => new CRUDService(model, schema, nodeService, nodeRepo);
  }




}
